<?xml version='1.0' encoding='utf-8'?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" updates="8407" category="std" ipr="trust200902" consensus="true" docName="draft-ietf-netmod-yang-semver-07" xml:lang="en" obsoletes="" submissionType="IETF" version="3">
  <front>
    <title abbrev="YANG Semver">YANG Semantic Versioning</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-netmod-yang-semver-07"/>
    <author initials="J." surname="Clarke" fullname="Joe Clarke" role="editor">
      <organization>Cisco Systems, Inc.</organization>
      <address>
        <postal>
          <street>7200-12 Kit Creek Rd</street>
          <city>Research Triangle Park</city>
          <region>North Carolina</region>
          <country>United States of America</country>
        </postal>
        <phone>+1-919-392-2867</phone>
        <email>jclarke@cisco.com</email>
      </address>
    </author>
    <author initials="R." role="editor" surname="Wilton" fullname="Robert Wilton">
      <organization abbrev="Cisco Systems, Inc.">
    Cisco Systems, Inc.
      </organization>
      <address>
        <email>rwilton@cisco.com</email>
      </address>
    </author>
    <author initials="R." surname="Rahman" fullname="Reshad Rahman">
      <address>
        <email>reshad@yahoo.com</email>
      </address>
    </author>
    <author initials="B." surname="Lengyel" fullname="Balazs Lengyel">
      <organization abbrev="Ericsson"> Ericsson </organization>
      <address>
        <postal>
          <street>Magyar Tudosok Korutja</street>
          <city>1117 Budapest</city>
          <country>Hungary</country>
        </postal>
        <phone>+36-70-330-7909</phone>
        <email>balazs.lengyel@ericsson.com</email>
      </address>
    </author>
    <author initials="J." surname="Sterne" fullname="Jason Sterne">
      <organization abbrev="Nokia">
    Nokia
      </organization>
      <address>
        <email>jason.sterne@nokia.com</email>
      </address>
    </author>
    <author initials="B." surname="Claise" fullname="Benoit Claise">
      <organization>
    Huawei
      </organization>
      <address>
        <email>benoit.claise@huawei.com</email>
      </address>
    </author>
    <date/>
    <abstract>
      <t>This document specifies a scheme and guidelines for applying an extended set of
    semantic versioning rules to revisions of YANG artifacts (e.g., modules and packages).  Additionally, this
    document defines an RFCAAAA-compliant revision-label-scheme for this YANG semantic versioning scheme.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="intro" numbered="true" toc="default">
      <name>Introduction</name>
      <t>
        <xref target="I-D.ietf-netmod-yang-module-versioning" format="default"/>
 puts forth a number of concepts relating
   to modified rules for updating YANG modules and submodules, a means to signal when a new revision of a module or submodule has
   non-backwards-compatible (NBC) changes compared to its previous revision, and a scheme that
   uses the revision history as a lineage for determining from where a specific revision of a YANG
   module or submodule is derived.  Additionally, section 3.4 of <xref target="I-D.ietf-netmod-yang-module-versioning" format="default"/>
   defines a revision-label which can be used as an alias to provide additional context or as a meaningful label to refer to a specific revision.</t>
      <t>This document defines a revision-label scheme that uses extended semantic versioning rules <xref target="SemVer" format="default"/>
 for YANG artifacts
    (i.e., YANG modules, YANG submodules, and YANG packages <xref target="I-D.ietf-netmod-yang-packages" format="default"/>
) as well as the
    revision label definition for using this scheme.  The goal being to add a human readable revision label that
    provides compatibility information for the YANG artifact without needing to compare or parse its body.
    The label and rules defined herein represent the RECOMMENDED revision label scheme for IETF YANG artifacts.</t>
    <t>Note that a specific revision of the SemVer 2.0.0 specification is referenced here (from June 19, 2020) to provide an immutable version.  This is because
    the 2.0.0 version of the specification has changed over time without any change to the semantic version itself.  In some cases
    the text has changed in non-backwards-compatible ways.</t>
  </section>
  <section anchor="terminology" numbered="true" toc="default">
    <name>Terminology and Conventions</name>
    <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT
  RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14 <xref target="RFC2119" format="default"/>
    <xref target="RFC8174" format="default"/>
 when, and only when, they appear in all capitals, as shown here.</t>
  <t>Additionally, this document uses the following terminology:
  </t>
  <ul spacing="normal">
    <li>YANG artifact: YANG modules, YANG submodules, and YANG packages
      <xref target="I-D.ietf-netmod-yang-packages" format="default"/>
 are examples of YANG artifacts
        for the purposes of this document.</li>
    <li>SemVer: A version string that corresponds to the rules defined in <xref target="SemVer" format="default"/>.  This specific camel-case notation is the one used
    by the SemVer 2.0.0 website and used within this document to distinguish between YANG Semver.</li>
    <li>YANG Semver: A revision-label identifier that is consistent with the extended set of semantic versioning rules, based on <xref target="SemVer" format="default"/>
,
      defined within this document.</li>
  </ul>
</section>
<section anchor="semantic_versioning" numbered="true" toc="default">
  <name>YANG Semantic Versioning</name>
  <t>This section defines YANG Semantic Versioning, explains how it is
  used with YANG artifacts, and describes the rules associated with changing an
  artifact's semantic version when its contents are
  updated.</t>
  <section anchor="semver_diffs" numbered="true" toc="default">
    <name>Relationship Between SemVer and YANG Semver</name>
    <t><xref target="SemVer" format="default"/> is completely compatible with YANG Semver in that a SemVer semantic version number is legal according to the YANG Semver
    rules (though the inverse is not necessarily true).  YANG Semver is a superset of the SemVer rules, and allow for limited branching within YANG artifacts.  If no branching occurs within a YANG artifact, the YANG Semver
    version label will appear as a SemVer version number.</t>
  </section>
  <section anchor="version_pattern" numbered="true" toc="default">
    <name>YANG Semver Pattern</name>
    <t>YANG artifacts that employ semantic versioning as defined in this document MUST use a version string (e.g., in revision-label
      or as a package version) that corresponds to the following pattern: 'X.Y.Z_COMPAT'.  Where:
    </t>
    <ul spacing="normal">
      <li>X, Y and Z are mandatory non-negative integers that are each less than or equal to 2147483647 (i.e., the maximum signed 32-bit integer value) and MUST NOT contain leading zeroes,</li>
      <li>The '.' is a literal period (ASCII character 0x2e),</li>
      <li>The '_' is an optional single literal underscore (ASCII character 0x5f) and MUST only be present if the following COMPAT element is included,</li>
      <li>COMPAT, if specified, MUST be either the literal string "compatible" or the literal string "non_compatible".</li>
    </ul>
    <t>Additionally, <xref target="SemVer" format="default"/>
 defines two specific types of metadata that may be appended to a semantic version string.
      Pre-release metadata MAY be appended to a semver string after a trailing '-' character.  Build metadata
      MAY be appended after a trailing '+' character.  If both pre-release and build metadata are present, then build metadata MUST
      follow pre-release metadata.  While build metadata MUST be ignored when comparing YANG semantic versions, pre-release metadata MUST be used
      during module and submodule development as specified in <xref target="guidelines" format="default"/>
.  Both pre-release and build metadata are allowed in order
      to support all the <xref target="SemVer" format="default"/>
 rules.  Thus, a version lineage that follows strict <xref target="SemVer" format="default"/>
 rules
      is allowed for a YANG artifact.</t>
<t>To signal the use of this versioning scheme, modules and submodules MUST set the revision-label-scheme extension, as defined in
<xref target="I-D.ietf-netmod-yang-module-versioning" format="default"/>
,
 to the identity "yang-semver".  That identity value is defined
      in the ietf-yang-semver module below.</t>
<t>Additionally, this ietf-yang-semver module defines a typedef that formally specifies the syntax of the YANG Semver.</t>
</section>
<section anchor="versioning_scheme" numbered="true" toc="default">
<name>Semantic Versioning Scheme for YANG Artifacts</name>
<t>This document defines the YANG semantic versioning scheme that is used for YANG
    artifacts that employ the YANG Semver label. The versioning scheme has the following properties:
</t>
<ul spacing="normal">
<li>The YANG semantic versioning scheme is extended from version
      2.0.0 of the semantic versioning scheme defined at semver.org <xref target="SemVer" format="default"/>
 to cover the additional requirements for the
      management of YANG artifact lifecyles that cannot be addressed using
      the semver.org 2.0.0 versioning scheme alone.</li>
<li>Unlike the <xref target="SemVer" format="default"/>
 versioning scheme, the YANG
      semantic versioning scheme supports updates to older
      versions of YANG artifacts, to allow for bug fixes and enhancements
      to artifact versions that are not the latest.  However, it does not
      provide for the unlimited branching and updating of older revisions
      which are documented by the general rules in
<xref target="I-D.ietf-netmod-yang-module-versioning" format="default"/>
.</li>
<li>YANG artifacts that follow the <xref target="SemVer" format="default"/>
 versioning
      scheme are fully compatible with implementations that understand
      the YANG semantic versioning scheme defined in this document.</li>
<li>If updates are always restricted to the latest revision
      of the artifact only, then the version numbers used by the YANG
      semantic versioning scheme are exactly the same as those defined
      by the <xref target="SemVer" format="default"/>
 versioning scheme.</li>
</ul>
<t>Every YANG module and submodule versioned using the YANG semantic versioning
    scheme specifies the module's or submodule's semantic version as the argument
    to the 'rev:revision-label' statement.</t>
<t>Because the rules put forth in <xref target="I-D.ietf-netmod-yang-module-versioning" format="default"/>
 are designed to work
     well with existing versions of YANG and allow for artifact authors to migrate to this scheme, it is not expected
     that all revisions of a given YANG artifact will have a semantic version label.  For example, the first revision of
     a module or submodule may have been produced before this scheme was available.</t>
<t>YANG packages that make use of this YANG Semver will reflect that in the package metadata.</t>
<t>
     As stated above, the YANG semantic version is expressed as a string of the
     form: 'X.Y.Z_COMPAT'.

</t>
<ul spacing="normal">
<li>'X' is the MAJOR version.  Changes in the MAJOR version number
       indicate changes that are non-backwards-compatible to versions
       with a lower MAJOR version number.</li>
<li>'Y' is the MINOR version.  Changes in the MINOR version number
       indicate changes that are backwards-compatible to versions with
       the same MAJOR version number, but a lower MINOR version number
       and no "_compatible" or "_non_compatible" modifier.</li>
<li>'Z' is the PATCH version and modifier.  Changes in the PATCH
       version number can indicate editorial.  An editorial change is defined to be a change in the YANG artifact's
   content that does not affect the semantic meaning or functionality provided by
   the artifact in any way.  Some examples include correcting a spelling mistake in the 
   description of a leaf within a YANG module or submodule, non-significant whitespace changes (e.g., 
   realigning description statements or changing indentation), or changes to YANG comments.  
   Note: restructuring how a module uses, or does not use, submodules
   is treated as an editorial level change on the condition that there is no change in the
   module's semantic behavior due to the restructuring.</li>
<li>
<t>'_COMPAT' is an additional modifier, unique to YANG Semver (i.e., not valid in <xref target="SemVer" format="default"/>), that indicates backwards-compatible, or
       non-backwards-compatible changes relative to versions with the
       same MAJOR and MINOR version numbers, but lower PATCH version
       number, depending on what form modifier '_COMPAT' takes:
</t>
<ul spacing="normal">
  <li>If the modifier string is absent, the change represents an
   editorial change.</li>
  <li>If, however, the modifier string is present, the meaning is described below:</li>
  <li>"_compatible" - the change represents a backwards-compatible change</li>
  <li>"_non_compatible" - the change represents a non-backwards-compatible change</li>
</ul>
</li>
</ul>
<t>The '_COMPAT' modifier string is "sticky". Once a revision of a module 
has a modifier in the revision label, then all descendants of that 
revision with the same X.Y version digits will also have a modifier. The modifier can change from 
"_compatible" to "_non_compatible" in a descendant revision, but the 
modifier MUST NOT change from "_non_compatible" to "_compatible" 
and MUST NOT be removed. The persistence of the "_non_compatible" modifier 
ensures that comparisons of revision labels do not give the false 
impression of compatibility between two potentially non-compatible 
revisions. If "_non_compatible" was removed, for example between revisions 
"3.3.2_non_compatible" and "3.3.3" (where "3.3.3" was simply an editorial 
change), then comparing revision labels of "3.3.3" back to an ancestor 
"3.0.0" would look like they are backwards compatible when they are 
not (since "3.3.2_non_compatible" was in the chain of ancestors and 
introduced a non-backwards-compatible change).</t>
<t>The YANG artifact name and YANG semantic version uniquely
    identify a revision of said artifact.
    There MUST NOT be multiple instances of a YANG artifact definition
    with the same name and YANG semantic version but
    different content (and in the case of modules and submodules, different revision dates).</t>
<t>There MUST NOT be multiple versions of a YANG artifact that have
    the same MAJOR, MINOR and PATCH version numbers, but different patch
    modifier strings.  E.g., artifact version "1.2.3_non_compatible" MUST NOT be defined
    if artifact version "1.2.3" has already been defined.</t>
<section anchor="semver_for_submodules" numbered="true" toc="default">
<name>YANG Semver with submodules</name>
<t>YANG Semver MAY be used to version submodules.  Submodule version are separate of any version on the including module, but if a submodule has changed, then the version of the including module MUST also be updated.</t>
<t>The rules for determining the version change of a submodule are the same as those defined in <xref target="version_pattern" format="default"/>
 and <xref target="versioning_scheme" format="default"/>
 as applied to YANG modules, except they only apply to the part of the module schema defined within the submodule's file.</t>
<t>One interesting case is moving definitions from one submodule to another in a way that does not change the resultant schema of the including module.  In this case:</t>
<ol spacing="normal" type="1">
<li>The including module has editorial changes</li>
<li>The submodule with the schema definition removed has non-backwards-compatible changes</li>
<li>The submodule with the schema definitions added has backwards-compatible changes</li>
</ol>
<t>Note that the meaning of a submodule may change drastically despite having no changes in content or revision due to changes in other submodules belonging to the same module (e.g. groupings and typedefs declared in one submodule and used in another).</t>
</section>
<section anchor="example_versions" numbered="true" toc="default">
<name>Examples for YANG semantic versions</name>
<t>The following diagram and explanation illustrate how YANG semantic versions work.</t>
<t keepWithNext="true">YANG Semantic versions for an example module:</t>
<artwork name="" type="" align="left" alt=""><![CDATA[
         0.1.0
           |
         0.2.0
           |
         1.0.0
           |  
         1.1.0 -> 1.1.1_compatible -> 1.1.2_non_compatible
           |   
         1.2.0 -> 1.2.1_non_compatible -> 1.2.2_non_compatible
           |  \  
         2.0.0 \
           |    \--> 1.3.0 -> 1.3.1_non_compatible
         3.0.0         |
           |         1.4.0
         3.1.0
]]></artwork>
<t>The tree diagram above illustrates how the version history might
   evolve for an example module.  The tree diagram only shows
   the parent/child ancestry relationships between the
   revisions. It does not describe the chronology of the revisions (i.e.
   when in time each revision was published relative to the other
   revisions).
</t>
<t>The following description lists an example of what the chronological 
   order of the revisions could look like, from oldest revision to newest:
</t>
<ul empty="true" spacing="normal">
<li>0.1.0 - first pre-release module version</li>
<li>0.2.0 - second pre-release module version (with NBC changes)</li>
<li>1.0.0 - first release (may have NBC changes from 0.2.0)</li>
<li>1.1.0 - added new functionality, leaf "foo" (BC)</li>
<li>1.2.0 - added new functionality, leaf "baz" (BC)</li>
<li>2.0.0 - change existing model for performance reasons, e.g. re-key list (NBC)</li>
<li>1.3.0 - improve existing functionality, added leaf "foo-64" (BC)</li>
<li>1.1.1_compatible - backport "foo-64" leaf to 1.1.x to avoid implementing "baz" from 1.2.0. This revision was created after 1.2.0 otherwise it may have been released as 1.2.0. (BC)</li>
<li>3.0.0 - NBC bugfix, rename "baz" to "bar"; also add new BC leaf "wibble"; (NBC)</li>
<li>1.3.1_non_compatible - backport NBC fix, rename "baz" to "bar" (NBC)</li>
<li>1.2.1_non_compatible - backport NBC fix, rename "baz" to "bar" (NBC)</li>
<li>1.1.2_non_compatible - NBC point bug fix, not required in 2.0.0 due to model changes (NBC)</li>
<li>1.4.0 - introduce new leaf "ghoti" (BC)</li>
<li>3.1.0 - introduce new leaf "wobble" (BC)</li>
<li>1.2.2_non_compatible - backport "wibble".  This is a BC change but "non_compatible" modifier is sticky. (BC)</li>
</ul>
<t>The partial ancestry relationships based on the semantic versioning numbers are as follows:
</t>
<ul empty="true" spacing="normal">
<li>1.0.0 &lt; 1.1.0 &lt; 1.2.0 &lt; 2.0.0 &lt; 3.0.0 &lt; 3.1.0</li>
<li>1.0.0 &lt; 1.1.0 &lt; 1.1.1_compatible &lt; 1.1.2_non_compatible</li>
<li>1.0.0 &lt; 1.1.0 &lt; 1.2.0 &lt; 1.2.1_non_compatible &lt; 1.2.2_non_compatible</li>
<li>1.0.0 &lt; 1.1.0 &lt; 1.2.0 &lt; 1.3.0 &lt; 1.3.1_non_compatible</li>
<li>1.0.0 &lt; 1.1.0 &lt; 1.2.0 &lt; 1.3.0 &lt; 1.4.0</li>
</ul>
<t>There is no ordering relationship between "1.1.1_non_compatible" and
   either "1.2.0" or "1.2.1_non_compatible", except that they share the
   common ancestor of "1.1.0".</t>
<t>Looking at the version number alone does not indicate ancestry. The 
   module definition in "2.0.0", for example, does not contain all the 
   contents of "1.3.0".  Version "2.0.0" is not derived from "1.3.0".</t>
</section>
</section>
<section anchor="semver_update_rules" numbered="true" toc="default">
<name>YANG Semantic Version Update Rules</name>
<t>When a new revision of an artifact is produced, then the following
    rules define how the YANG semantic version for the new artifact
    revision is calculated, based on the changes between the two artifact
    revisions, and the YANG semantic version of the base artifact
revision from which the changes are derived.</t>
<t>
The following four rules specify the RECOMMENDED, and REQUIRED minimum, update to a YANG semantic version:
</t>
<ol spacing="normal" type="1">
<li>If an artifact is being updated in a non-backwards-compatible way,
then the artifact version "X.Y.Z[_compatible|_non_compatible]" SHOULD be
updated to "X+1.0.0" unless that version has already been
used for this artifact but with different content, in which case the artifact version "X.Y.Z+1_non_compatible"
SHOULD be used instead.</li>
<li>
<t>If an artifact is being updated in a backwards-compatible way,
      then the next version number depends on the format of the current
      version number:
</t>
<ol spacing="normal" type="%i">
<li>"X.Y.Z" - the artifact version SHOULD be updated to "X.Y+1.0",
    unless that version has already been used for this artifact but with different content,
    when the artifact version SHOULD be updated to
    "X.Y.Z+1_compatible" instead.</li>
<li>"X.Y.Z_compatible" - the artifact version SHOULD be updated to
    "X.Y.Z+1_compatible".</li>
<li>"X.Y.Z_non_compatible" - the artifact version SHOULD be updated to
    "X.Y.Z+1_non_compatible".</li>
</ol>
</li>
<li>
<t>If an artifact is being updated in an editorial way, then the next
      version number depends on the format of the current version
      number:
</t>
<ol spacing="normal" type="%i">
<li>"X.Y.Z" - the artifact version SHOULD be updated to "X.Y.Z+1"</li>
<li>"X.Y.Z_compatible" - the artifact version SHOULD be updated to
    "X.Y.Z+1_compatible".</li>
<li>"X.Y.Z_non_compatible" - the artifact version SHOULD be updated to
    "X.Y.Z+1_non_compatible".</li>
</ol>
</li>
<li>YANG artifact semantic version numbers beginning with 0, i.e.,
      "0.X.Y", are regarded as pre-release definitions and need not follow the
      rules above.  Either the MINOR or PATCH version numbers may be
      updated, regardless of whether the changes are
      non-backwards-compatible, backwards-compatible, or editorial.  See <xref target="guidelines" format="default"/>
 for
      more details on using this notation during module and submodule development.</li>
<li>Additional pre-release rules for modules that have had at least one release are specified in <xref target="guidelines" format="default"/>
.</li>
</ol>
<t>Although artifacts SHOULD be updated according to the rules
   above, which specify the recommended (and minimum required) update
   to the version number, the following rules MAY be applied when
   choosing a new version number:
</t>
<ol spacing="normal" type="1">
<li>An artifact author MAY update the version number with a more significant
  update than described by the rules above.  For example, an artifact could be
  given a new MAJOR version number (i.e., X+1.0.0), even though no
  non-backwards-compatible changes have occurred, or an artifact could be given
  a new MINOR version number (i.e., X.Y+1.0) even if the changes were only
  editorial.
</li>
<li>An artifact author MAY skip version numbers.  That is, an artifact's
revision history could be 1.0.0, 1.1.0, and 1.3.0 where 1.2.0 is
skipped.  Note that skipping versions has an impact when importing
modules by revision-or-derived.  See <xref target="import_semver" format="default"/>
 for
  more details on importing modules with revision-label version gaps.</li>
</ol>
<t>Although YANG Semver always indicates when a non-backwards-compatible, or backwards-compatible change may have occurred to a YANG artifact, it does not guarantee that such a change has occurred, or that consumers of that YANG artifact will be impacted by the change.  Hence, tooling, e.g., <xref target="I-D.ietf-netmod-yang-schema-comparison" format="default"/>
, also plays an important role for comparing YANG artifacts and calculating the likely impact from changes.</t>
<t>
<xref target="I-D.ietf-netmod-yang-module-versioning" format="default"/>
 defines the "rev:non-backwards-compatible" extension statement to indicate where non-backwards-compatible changes have occurred in the module revision history.  If a revision entry in a module's revision history includes the "rev:non-backwards-compatible" statement then that MUST be reflected in any YANG semantic version associated with that revision.  However, the reverse does not necessarily hold, i.e., if the MAJOR version has been incremented it does not necessarily mean that a "rev:non-backwards-compatible" statement would be present.</t>
</section>
<section anchor="examples" numbered="true" toc="default">
<name>Examples of the YANG Semver Label</name>
<section anchor="example_module" numbered="true" toc="default">
<name>Example Module Using YANG Semver</name>
<t>Below is a sample YANG module that uses the YANG Semver revision-label
        based on the rules defined in this document.
</t>
<artwork name="" type="" align="left" alt=""><![CDATA[
  module example-versioned-module {
    yang-version 1.1;
    namespace "urn:example:versioned:module";
    prefix "exvermod";
    rev:revision-label-scheme "ysver:yang-semver";

    import ietf-yang-revisions { prefix "rev"; }
    import ietf-yang-semver { prefix "ysver"; }

    description
      "to be completed";

    revision 2017-08-30 {
      description "Backport 'wibble' leaf";
      rev:revision-label 1.2.2_non_compatible;
    }

    revision 2017-07-30 {
      description "Rename 'baz' to 'bar'";
      rev:revision-label 1.2.1_non_compatible;
      rev:non-backwards-compatible;
    }

    revision 2017-04-20 {
      description "Add new functionality, leaf 'baz'";
      rev:revision-label 1.2.0;
    }

    revision 2017-04-03 {
      description "Add new functionality, leaf 'foo'";
      rev:revision-label 1.1.0;
    }

    revision 2017-02-07 {
      description "First release version.";
      rev:revision-label 1.0.0;
    }

    // Note: semver rules do not apply to 0.X.Y labels.
    // The following pre-release revision statements would not
    // appear in any final published version of a module. They
    // are removed when the final version is published.
    // During the pre-release phase of development, only a
    // single one of these revision statements would appear

    // revision 2017-01-30 {
    //   description "NBC changes to initial revision";
    //   rev:revision-label 0.2.0;
    //   rev:non-backwards-compatible; // optional
    //                         // (theoretically no 
    //                         // 'previous released version')
    // }

    // revision 2017-01-26 {
    //   description "Initial module version";
    //   rev:revision-label 0.1.0;
    // }

    //YANG module definition starts here
  }
]]></artwork>
</section>
<section anchor="example_package" numbered="true" toc="default">
<name>Example of Package Using YANG Semver</name>
<t>Below is an example YANG package that uses the semver revision label based on
      the rules defined in this document.
</t>
<artwork name="" type="" align="left" alt=""><![CDATA[
   {
     "ietf-yang-instance-data:instance-data-set": {
       "name": "example-yang-pkg",
       "target-ptr": "TBD",
       "timestamp": "2018-09-06T17:00:00Z",
       "description": "Example IETF package definition",
       "content-data": {
         "ietf-yang-package:yang-package": {
           "name": "example-yang-pkg",
           "version": "1.3.1",
           ...
  }
]]></artwork>
</section>
</section>
</section>
<section anchor="import_semver" numbered="true" toc="default">
<name>Import Module by Semantic Version</name>
<t>
<xref target="I-D.ietf-netmod-yang-module-versioning" format="default"/>
 allows for imports to be
    done based on a module or a derived revision of a module.  The rev:revision-or-derived
    statement can specify either a revision date or a revision label.  The YANG Semver revision-label value can be used as the argument to rev:revision-or-derived
    .  When used as such, any module that contains exactly the same YANG semantic version in its revision history may be used
    to satisfy the import requirement.  For example:</t>
<artwork name="" type="" align="left" alt=""><![CDATA[
        import example-module {
          rev:revision-or-derived 3.0.0;
        }
]]></artwork>
<t>Note: the import lookup does not stop
    when a non-backward-compatible change is encountered.  That is, if module B imports a module A at or derived from version 2.0.0,
    resolving that import will pass through a revision of module A with version "2.1.0_non_compatible" in order to determine if the present instance of
    module A derives from "2.0.0".</t>
<t>If an import by revision-or-derived cannot locate the specified revision-label in a given module's revision history, that import will fail.  This is
  noted in the case of version gaps.  That is, if a module's history includes "1.0.0", "1.1.0", and "1.3.0", an import from revision-or-derived at "1.2.0" will be
  unable to locate the specified revision entry and thus the import cannot be satisfied.</t>
</section>
<section anchor="guidelines" numbered="true" toc="default">
<name>Guidelines for Using Semver During Module Development</name>
<t>This section and the IETF-specific sub-section below provides YANG Semver-specific
    guidelines to consider when developing new YANG modules.  As such this section
    updates <xref target="RFC8407" format="default"/>
.</t>
<t>Development of a brand new YANG module or submodule outside of the IETF that uses YANG Semver as its
    revision-label scheme SHOULD begin with a 0 for the MAJOR
    version component.  This allows the module or submodule to disregard strict
    SemVer rules with respect to non-backwards-compatible changes
    during its initial development.  However, module or submodule developers MAY choose
    to use the SemVer pre-release syntax instead with a 1 for the MAJOR
    version component.  For example, an initial module or submodule revision-label might
    be either 0.0.1 or 1.0.0-alpha.1.  If the authors choose to use the 0 MAJOR version
    component scheme, they MAY switch to the pre-release scheme with a
    MAJOR version component of 1 when the module or submodule is nearing initial release
    (e.g., a module's or submodule's revision label may transition from 0.3.0 to
    1.0.0-beta.1 to indicate it is more mature and ready for testing).</t>
<t>When using pre-release notation, the format MUST include at least one alphabetic
    component and MUST end with a '.' or '-' and then one or more digits.  These alphanumeric components will
    be used when deciding pre-release precedence.  The following are examples of
    valid pre-release versions:
</t>
<ul empty="true" spacing="normal">
<li>1.0.0-alpha.1</li>
<li>1.0.0-alpha.3</li>
<li>2.1.0-beta.42</li>
<li>3.0.0-202007.rc.1</li>
</ul>
<t>When developing a new revision of an existing module or submodule using the YANG
    semver revision-label scheme, the intended target semantic version MUST
    be used along with pre-release notation.  For example, if a released
    module or submodule which has a current revision-label of 1.0.0 is being modified
    with the intent to make non-backwards-compatible changes, the first
    development MAJOR version component must be 2 with some pre-release
    notation such as -alpha.1, making the version 2.0.0-alpha.1.  That said,
    every publicly available release of a module or submodule MUST have a unique YANG
    semver revision-label (where a publicly available release is one that
    could be implemented by a vendor or consumed by an end user).
    Therefore, it may be prudent to include the
    year or year and month development began (e.g., 2.0.0-201907-alpha.1).
    As a module or submodule undergoes development, it is possible that the original
    intent changes.  For example, a 1.0.0 version of a module or submodule that was
    destined to become 2.0.0 after a development cycle may have had a
    scope change such that the final version has no
    non-backwards-compatible changes and becomes 1.1.0 instead.  This
    change is acceptable to make during the development phase so long as
    pre-release notation is present in both versions (e.g., 2.0.0-alpha.3
    becomes 1.1.0-alpha.4).  However, on the next development cycle (after 1.1.0 is released), if
    again the new target release is 2.0.0, new pre-release components
    must be used such that every revision-label for a given module or submodule MUST
    be unique throughout its entire lifecycle (e.g., the first pre-release
    version might be 2.0.0-202005-alpha.1 if keeping the same year and month
    notation mentioned above).</t>
<section anchor="pre_release_precedence" numbered="true" toc="default">
<name>Pre-release Version Precedence</name>
<t>As a module or submodule is developed, the scope of the work may change.  That is, 
while a ratified module or submodule with revision-label 1.0.0 is initially intended to 
become 2.0.0 in its next ratified version, the scope of work may change such that the 
final version is 1.1.0.  During the development
cycle, the pre-release versions could move from
2.0.0-some-pre-release-tag to 1.1.0-some-pre-release-tag.  This
downwards changing of version numbers makes it difficult to evaluate
semantic version rules between pre-release versions.  However, taken
independently, each pre-release version can be compared to the
previously ratified version (e.g., 1.1.0-some-pre-release-tag and
2.0.0-some-pre-release-tag can each be compared to 1.0.0).  Module and submodule developers 
SHOULD maintain only one revision statement in a
pre-released module or submodule that reflects the latest revision.  IETF authors MAY
choose to include an appendix in the associated draft to track
overall changes to the module or submodule.</t>
</section>
<section anchor="ietf_guidelines" numbered="true" toc="default">
<name>YANG Semver in IETF Modules</name>
<t>All published IETF modules and submodules MUST use YANG semantic versions for their revision-labels.</t>
<t>Development of a new module or submodule within the IETF SHOULD begin with the 0 MAJOR number scheme as described above.
    When revising an existing IETF module or submodule, the revision-label MUST use the target (i.e., intended) MAJOR
    and MINOR version components with a 0 PATCH version component.  If the intended ratified release will be non-backward-compatible
    with the current ratified release, the MINOR version component MUST be 0.</t>
<section anchor="ietf_module_development" numbered="true" toc="default">
<name>Guidelines for IETF Module Development</name>
<t>All IETF modules and submodules in development MUST use the whole document name as a pre-release version string,
        including the current document revision.  For
        example, if a module or submodule which is currently released at version 1.0.0 is being
        revised to include non-backwards-compatible changes in draft-user-netmod-foo, its
        development revision-labels MUST include 2.0.0-draft-user-netmod-foo followed by the
      document's revision (e.g., 2.0.0-draft-user-netmod-foo-02).  This will ensure each
      pre-release version is unique across the lifecycle of the module or submodule.  Even when using the 0 MAJOR
      version for initial module or submodule development (where MINOR and PATCH can change), appending the
      draft name as a pre-release component helps to ensure uniqueness when there are perhaps
      multiple, parallel efforts creating the same module or submodule.</t>
      <t>Some draft revisions may not include an update to the included YANG modules or submodules.  In that case, those modules are submodules
      that are not updated do not not require a change to their versions.  Updates to the YANG Semver version MUST only be done when the revision
      of the module changes.</t>
      <t>See <xref target="appendix_A" format="default"/>
 for a detailed example of IETF pre-release versions.</t>
</section>
<section anchor="ietf_released_modules" numbered="true" toc="default">
<name>Guidelines for Published IETF Modules</name>
<t>For IETF YANG modules and submodules that have already been published, revision-labels MUST be
retroactively applied to all existing revisions when the next new revision is created, starting at
version "1.0.0" for the initial published revision, and then incrementing according to the YANG Semver version rules specified in <xref target="semver_update_rules" format="default"/>
.
For example, if a module or submodule started out in the pre-NMDA (<xref target="RFC8342" format="default"/>
) world, and then had NMDA support added without
removing any legacy "state" branches -- and you are looking to add additional new features -- a sensible choice for the target YANG Semver would be 1.2.0 (since 1.0.0 would
have been the initial, pre-NMDA release, and 1.1.0 would have been the NMDA revision).</t>
</section>
</section>
</section>
<section anchor="yang_module" numbered="true" toc="default">
<name>YANG Module</name>
<t>This YANG module contains the typedef for the YANG semantic version and the identity to signal its use.</t>
<sourcecode name="ietf-yang-semver@2022-09-13.yang" type="" markers="true"><![CDATA[
module ietf-yang-semver {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-yang-semver";
  prefix ysver;
  rev:revision-label-scheme "yang-semver";

  import ietf-yang-revisions {
    prefix rev;
  }

  organization
    "IETF NETMOD (Network Modeling) Working Group";
  contact
    "WG Web:   <http://tools.ietf.org/wg/netmod/>
     WG List:  <mailto:netmod@ietf.org>

     Author:   Joe Clarke
               <mailto:jclarke@cisco.com>
     Author:   Robert Wilton
               <mailto:rwilton@cisco.com>
     Author:   Reshad Rahman
               <mailto:reshad@yahoo.com>
     Author:   Balazs Lengyel
               <mailto:balazs.lengyel@ericsson.com>
     Author:   Jason Sterne
               <mailto:jason.sterne@nokia.com>
     Author:   Benoit Claise
               <mailto:benoit.claise@huawei.com>";
  description
    "This module provides type and grouping definitions for YANG
     packages.

     Copyright (c) 2021 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Simplified BSD License
     set forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (http://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC XXXX; see
     the RFC itself for full legal notices.";

  // RFC Ed.: update the date below with the date of RFC publication
  // and remove this note.
  // RFC Ed.: replace XXXX with actual RFC number and remove this
  // note.
  // RFC Ed. update the rev:revision-label to "1.0.0".

  revision 2022-09-13 {
    rev:revision-label "1.0.0-draft-ietf-netmod-yang-semver-08";
    description
      "Initial revision";
    reference
      "RFC XXXX: YANG Semantic Versioning.";
  }

  /*
   * Identities
   */

  identity yang-semver {
    base rev:revision-label-scheme-base;
    description
      "The revision-label scheme corresponds to the YANG Semver
       scheme which is defined by the pattern in the 'version' 
       typedef below. The rules governing this revision-label 
       scheme are defined in the reference for this identity.";
    reference
      "RFC XXXX: YANG Semantic Versioning.";
  }

  /*
   * Typedefs
   */

  typedef version {
    type rev:revision-label {
      pattern '[0-9]+[.][0-9]+[.][0-9]+(_(non_)?compatible)?'
      + '(-[A-Za-z0-9.-]+[.-][0-9]+)?([+][A-Za-z0-9.-]+)?';
    }
    description
      "Represents a YANG semantic version.  The rules governing the
       use of this revision label scheme are defined in the 
       reference for this typedef.";
    reference
      "RFC XXXX: YANG Semantic Versioning.";
  }
}
    ]]></sourcecode>
</section>
<section anchor="contributor" numbered="true" toc="default">
<name>Contributors</name>
<t>This document grew out of the YANG module versioning design team
  that started after IETF 101. The design team consists of the following
  members whom have worked on the YANG versioning project: Balazs Lengyel, Benoit Claise, Bo Wu, Ebben Aries, Jan Lindblad, Jason Sterne, Joe Clarke,
  Juergen Schoenwaelder, Mahesh Jethanandani, Michael (Wangzitao), Qin Wu, Reshad Rahman, and Rob Wilton.</t>
<t>The initial revision of this document was refactored and built
   upon <xref target="I-D.clacla-netmod-yang-model-update" format="default"/>
.  We would like the thank Kevin D'Souza for his initial work in this problem space.</t>
<t>Discussions on the use of SemVer for YANG versioning has been held
   with authors of the OpenConfig YANG models based on their own <xref target="openconfigsemver" format="default"/>
.  We would like thank both
   Anees Shaikh and Rob Shakir for their input into this problem
   space.</t>
</section>
<section anchor="security" numbered="true" toc="default">
<name>Security Considerations</name>
<t>The document does not define any new protocol or data model.  There
  are no security impacts.</t>
</section>
<section anchor="iana" numbered="true" toc="default">
<name>IANA Considerations</name>
<section anchor="yang-module-registrations" numbered="true" toc="default">
<name>YANG Module Registrations</name>
<t>This document requests IANA to register a URI in the "IETF XML Registry"
<xref target="RFC3688"/>
.  Following the format in RFC 3688, the following registration
    is requested.</t>
<ul empty="true" spacing="normal">
<li>URI: urn:ietf:params:xml:ns:yang:ietf-yang-semver</li>
<li>Registrant Contact: The IESG.</li>
<li>XML: N/A, the requested URI is an XML namespace.</li>
</ul>
<t>The following YANG module is requested to be registered in the "IANA
  Module Names" <xref target="RFC6020"/>
.  Following the format in RFC 6020,
  the following registrations are requested:</t>
<t>The ietf-yang-semver module:</t>
<ul empty="true" spacing="normal">
<li>Name: ietf-yang-semver</li>
<li>XML Namespace: urn:ietf:params:xml:ns:yang:ietf-yang-semver</li>
<li>Prefix: ysver</li>
<li>Reference: [RFCXXXX]</li>
</ul>
</section>
<section numbered="true" toc="default">
<name>Guidance for YANG Semver in IANA maintained YANG modules and submodules</name>
<t>Note for IANA (to be removed by the RFC editor): Please check that the
    registries and IANA YANG modules and submodules are referenced in the appropriate way.</t>
<t>IANA is responsible for maintaining and versioning some YANG
    modules and submodules, e.g., iana-if-types.yang <xref target="IfTypeYang" format="default"/>
 and
    iana-routing-types.yang <xref target="RoutingTypesYang" format="default"/>
.</t>
<t>In addition to following the rules specified in the IANA
    Considerations section of <xref target="I-D.ietf-netmod-yang-module-versioning" format="default"/>
, IANA maintained
    YANG modules and submodules MUST also include a YANG Semver revision label for all
    new revisions, as defined in <xref target="semantic_versioning" format="default"/>
.</t>
<t>The YANG Semver version associated with the new revision MUST
    follow the rules defined in <xref target="semver_update_rules" format="default"/>
.</t>
<t>Note: For IANA maintained YANG modules and submodules that have already been
    published, revision labels MUST be retroactively applied to all
    existing revisions when the next new revision is created, starting
    at version "1.0.0" for the initial published revision, and then
    incrementing according to the YANG Semver rules specified in
<xref target="semver_update_rules" format="default"/>
.</t>
<t>Most changes to IANA maintained YANG modules and submodules are expected to be
    backwards-compatible changes and classified as MINOR version
    changes.  The PATCH version may be incremented instead when only
    editorial changes are made, and the MAJOR version would be
    incremented if non-backwards-compatible changes are made.</t>
<t>Given that IANA maintained YANG modules are versioned with a
    linear history, it is anticipated that it should not be necessary to
    use the "_compatible" or "_non_compatible" modifiers to the
    "Z_COMPAT" version element.</t>
</section>
</section>
</middle>
<back>
<references>
<name>References</name>
<references>
<name>Normative References</name>
<xi:include href="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
<xi:include href="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3688.xml"/>
<xi:include href="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6020.xml"/>
<xi:include href="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
<xi:include href="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8407.xml"/>
<xi:include href="http://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-netmod-yang-module-versioning.xml"/>
</references>
<references>
<name>Informative References</name>
<xi:include href="http://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.clacla-netmod-yang-model-update.xml"/>
<xi:include href="http://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-netmod-yang-packages.xml"/>
<xi:include href="http://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-netmod-yang-schema-comparison.xml"/>
<xi:include href="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8342.xml"/>
<reference anchor="openconfigsemver" target="http://www.openconfig.net/docs/semver/">
<front>
<title>Semantic Versioning for Openconfig Models</title>
<author/>
<date/>
</front>
</reference>
<reference anchor="SemVer" target="https://github.com/semver/semver/blob/8b2e8eec394948632957639dfa99fc7ec6286911/semver.md">
<front>
<title>Semantic Versioning 2.0.0 (text from June 19, 2020)</title>
<author/>
<date/>
</front>
</reference>
<reference anchor="IfTypeYang" target="https://www.iana.org/assignments/iana-if-type/iana-if-type.xhtml">
<front>
<title>iana-if-type YANG Module</title>
<author/>
<date/>
</front>
</reference>
<reference anchor="RoutingTypesYang" target="https://www.iana.org/assignments/iana-routing-types/iana-routing-types.xhtml">
<front>
<title>iana-routing-types YANG Module</title>
<author/>
<date/>
</front>
</reference>
</references>
</references>
<section anchor="appendix_A" numbered="true" toc="default">
<name>Example IETF Module Development</name>
<t>Assume a new YANG module is being developed in the netmod working group in the IETF.
    Initially, this module is being developed in an individual internet draft, draft-jdoe-netmod-example-module.
    The following represents the initial version tree (i.e., value of revision-label) of the module as it's being initially developed.</t>
<t keepWithNext="true">Version lineage for initial module development:</t>
<artwork name="" type="" align="left" alt=""><![CDATA[
      0.0.1-draft-jdoe-netmod-example-module-00
        |
      0.1.0-draft-jdoe-netmod-example-module-01
        |
      0.2.0-draft-jdoe-netmod-example-module-02
        |
      0.2.1-draft-jdoe-netmod-example-module-03
]]></artwork>
<t>At this point, development stabilizes, and the workgroup adopts the draft.  Thus now the draft becomes
    draft-ietf-netmod-example-module.  The initial pre-release lineage continues as follows.</t>
<t keepWithNext="true">Continued version lineage after adoption:</t>
<artwork name="" type="" align="left" alt=""><![CDATA[
    1.0.0-draft-ietf-netmod-example-module-00
      |
    1.0.0-draft-ietf-netmod-example-module-01
      |
    1.0.0-draft-ietf-netmod-example-module-02
]]></artwork>
<t>At this point, the draft is ratified and becomes RFC12345 and the YANG module version becomes 1.0.0.</t>
<t>A time later, the module needs to be revised to add additional capabilities.  Development will be done in a
    backwards-compatible way.  Two new individual drafts are proposed to go about adding the capabilities in
    different ways: draft-jdoe-netmod-exmod-enhancements and draft-jadoe-netmod-exmod-changes.  These are initially
    developed in parallel with the following versions.</t>
<t keepWithNext="true">Parallel development for next module revision (track 1):</t>
<artwork name="" type="" align="left" alt=""><![CDATA[
      1.1.0-draft-jdoe-netmod-exmod-enhancements-00
        |
      1.1.0-draft-jdoe-netmod-exmod-enhancements-01
]]></artwork>
<t keepWithNext="true">In parallel with (track 2):</t>
<artwork name="" type="" align="left" alt=""><![CDATA[
      1.1.0-draft-jadoe-netmod-exmod-changes-00
        |
      1.1.0-draft-jadoe-netmod-exmod-changes-01
]]></artwork>
<t>At this point, the WG decides to merge some aspects of both and adopt the work in jadoe's draft
    as draft-ietf-netmod-exmod-changes.  A single version lineage continues.</t>
<artwork name="" type="" align="left" alt=""><![CDATA[
      1.1.0-draft-ietf-netmod-exmod-changes-00
        |
      1.1.0-draft-ietf-netmod-exmod-changes-01
        |
      1.1.0-draft-ietf-netmod-exmod-changes-02
        |
      1.1.0-draft-ietf-netmod-exmod-changes-03
]]></artwork>
<t>The draft is ratified, and the new module version becomes 1.1.0.</t>
</section>
</back>
</rfc>
<!-- Local Variables: -->
<!-- fill-column:72 -->
<!-- End: -->
