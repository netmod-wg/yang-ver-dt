// Jan 17, 2023: THIS IS A TEMPORARY FILE WE ARE USING FOR REVIEW & NOTES.
// EVENTUALLY REMOVE FROM THE REPO.

>>JTS: discuss how this works with sub-modules (sep sub-extension statements? main one at module level, sub at sub-module level
>>JTS: TBD - how prescriptive on tool output? e.g. YANG module that defines the output (e.g. to be machine readable)
>>JTS: how presecriptive on rules of a tool. Is a tool allowed to mark as "possibly-NBC" or is a tool *required* to mark as nbc (e.g. pattern change). Default mode (but adding extra knobs will always be OK). 
>>JTS: update pyang? hackathon for tool (ad hoc hackathon).
>>JTS: how strongly is the draft tied to an implementation/code? i.e. reference algorithm. e.g. like line-wrapping? Informative reference to a min revision of a tool (or just a tool name, or plugin name).

Network Working Group                                     R. Wilton, Ed.
Internet-Draft                                       Cisco Systems, Inc.
Updates: 7950 (if approved)                              25 October 2022
Intended status: Standards Track                                        
Expires: 28 April 2023


                         YANG Schema Comparison
              draft-ietf-netmod-yang-schema-comparison-02

Abstract

   This document specifies an algorithm for comparing two revisions of a
   YANG schema to determine the scope of changes, and a list of changes,
   between the revisions.  The output of the algorithm can be used to
   help select an appropriate revision-label or YANG semantic version
   number for a new revision.  This document defines a YANG extension
   that provides YANG annotations to help the tool accurately determine
   the scope of changes between two revisions.

>>JTS: reword this sentence:
The output of the algorithm can be used to help select an appropriate [top level nbc-marker] and revision-label (e.g. YANG Semver) for a new revision.
Revision-labels like YANG Semver that use compatibility information.

>>JTS: rework the last sentence: plural extensions & the per node extensions are also for *authors* to signal a situation.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 28 April 2023.

Copyright Notice

   Copyright (c) 2022 IETF Trust and the persons identified as the
   document authors.  All rights reserved.










Wilton                    Expires 28 April 2023                 [Page 1]

Internet-Draft           YANG Schema Comparison             October 2022


   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Terminology and Conventions . . . . . . . . . . . . . . . . .   4
   3.  Generic YANG schema tree comparison algorithm . . . . . . . .   4
     3.1.  YANG module revision scope extension annotations  . . . .   6
     3.2.  Node compatibility extension statements . . . . . . . . .   6
   4.  YANG module comparison algorithm  . . . . . . . . . . . . . .   9
   5.  YANG schema comparison algorithms . . . . . . . . . . . . . .  10
     5.1.  Standard YANG schema comparison algorithm . . . . . . . .  10
     5.2.  Filtered YANG schema comparison algorithm . . . . . . . .  10
   6.  Comparison tooling  . . . . . . . . . . . . . . . . . . . . .  11
   7.  Module Versioning Extension YANG Modules  . . . . . . . . . .  11
   8.  Contributors  . . . . . . . . . . . . . . . . . . . . . . . .  17
   9.  Security Considerations . . . . . . . . . . . . . . . . . . .  18
   10. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  18
     10.1.  YANG Module Registrations  . . . . . . . . . . . . . . .  18
   11. References  . . . . . . . . . . . . . . . . . . . . . . . . .  18
     11.1.  Normative References . . . . . . . . . . . . . . . . . .  18
     11.2.  Informative References . . . . . . . . . . . . . . . . .  19
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  19

1.  Introduction

>>JTS: Explain the 3 sections and how they fit together:
   3.  Generic YANG schema tree comparison algorithm . . . . . . . .   4
   4.  YANG module comparison algorithm  . . . . . . . . . . . . . .   9
   5.  YANG schema comparison algorithms . . . . . . . . . . . . . .  10

   Warning, this is an early (-00) draft with the intention of scoping
   the outline of the solution, hopefully for the WG to back the
   direction of the solution.  Refinement of the solution details is
   expected, if this approach is accepted by the WG.

>>JTS: TBD if we link back to requirements with one simple sentence. See what we did in Module Versioning?
   This document defines a solution to Requirement 2.2 in
   [I-D.ietf-netmod-yang-versioning-reqs].  Complementary documents
   provide a complete solution to the YANG versioning requirements, with
   the overall relationship of the solution drafts described in
   [I-D.ietf-netmod-yang-solutions].
>>JTS: not sure we should keep this paragraph anymore? Instead we should just describe what this draft is about on its own terms. e.g.

This draft defines the algorithms and output of a tool that compares two versions of a schema. Each schema could be composed of multiple YANG modules and submodules. The output identifies schema nodes that have changed, and categorizes the changes into:
- NBC
- BC
- Editorial
Three extensions are defined to allow authors to mark a particular changes as NBC/BC/Editorial (override the tool's algorithmic decisions). e.g. mark a pattern change as BC.









Wilton                    Expires 28 April 2023                 [Page 2]

Internet-Draft           YANG Schema Comparison             October 2022


   YANG module 'revision-labels'
   [I-D.ietf-netmod-yang-module-versioning] and the use of YANG semantic
   version numbers [I-D.ietf-netmod-yang-semver] can be used to help
   manage and report changes between revisions of individual YANG
   modules.
>>JTS: describe how is this draft related to module versioning, YANG semver, and packages.
- helps generate/check the module versioning nbc-change tagged
- helps generatge/check the YANG Semver
- packages used to provide a schema as input into the comparison

   YANG packages [I-D.ietf-netmod-yang-packages] along with YANG
   semantic version numbers can be used to help manage and report
   changes between revisions of YANG schema.

>>JTS: reduce description of the other drafts. Focus on how schema comparison works with the other drafts.
   [I-D.ietf-netmod-yang-module-versioning] and
   [I-D.ietf-netmod-yang-packages] define how to classify changes
   between two module or package revisions, respectively, as backwards
   compatible or non-backwards-compatible.
   [I-D.ietf-netmod-yang-semver] refines the definition, to allow
   backwards compatible changes to be classified as 'minor changes' or
   'editorial changes'.

   'Revision-label's and YANG semantic version numbers, whilst being
   generally simple and helpful in the mainline revision history case,
   are not sufficient in all scenarios.  For example, when comparing two
   revisions/versions on independent revision branches, without a direct
   ancestor relationship between the two revisions/versions.  In this
   cases, an algorithmic comparison approach is beneficial.

   In addition, the module revision history's 'nbc-changes' extension
   statement, and YANG semantic version numbers, effectively declare the
   worst case scenario.  If any non-backwards-compatible changes are
   restricted to only parts of the module/schema that are not used by an
   operator, then the operator is able to upgrade, and effectively treat
   the differences between the two revisions/versions as backwards
   compatible because they are not materially impacted by the non-
   backwards-compatible changes.

   Hence, this document defines algorithms that can be applied to
   revisions of YANG modules or versions of YANG schema (e.g., as
   represented by YANG packages), to determine the changes, and scope of
   changes between the revisions/versions.
   
**>>JTS we should also support sets of modules without requiring packages, e.g. the command line for the tool should accept 2 lists/sets of files:
set1: ver1/module.yang,ver1/module2.yang,ver1/my-mod*.yang
set2: ver2/*.yang
Need to address "features" (e.g. default to all features being enabled). 
Ignore if-feature "not(foo)" ?
Ignore if-feature statements in the YANG (process the diff as if the file didn't contain any if-feature statements at all) ?
(don't forget we need to compare the if-feature statements themselves)
Features as input to the tool (but still need default behavior).

======================= Got to here Jan 17 =======================

   For many YANG statements, programmatic tooling can determine whether
   the changes between the statements constitutes a backwards-compatible
   or non-backwards-compatible change.  However, for some statements, it
   is not feasible for current tooling to determine whether the changes
   are backwards-compatible or not.  For example, in the general case,
   tooling cannot determine whether the change in a YANG description
   statement causes a change in the semantics of a YANG data node.  If
   the change is to fix a typo or spelling mistake then the change can
   be classified as an editorial backwards-compatible change.



Wilton                    Expires 28 April 2023                 [Page 3]

Internet-Draft           YANG Schema Comparison             October 2022


   Conversely, if the change modifies the behavioral specification of
   the data node then the change would need to be classified as either a
   non editorial backwards-compatible change or a non-backwards-
   compatible change.  Hence, extension statements are defined to
   annotate a YANG module with additional information to clarify the
   scope of changes in cases that cannot be determined by algorithmic
   comparison.
**>>JTS: update to also include author overrides (shrink a range, mark it BC).
- tool can highlight overrides (with flag to suppress warnings about overrides)

>>JTS: description says 1..100, range says 1..150. Which is the contract/API?
>>JTS: Key discussion to resolve: Do the per-node tags affect the top level nbc-change flag and the YANG Semver?
>>JTS: Tool should mention by default if there is the existence of >0 overrides (and maybe list them all?)

======================= Got to here Jan 24 =======================


   Open issues are tracked at https://github.com/netmod-wg/yang-ver-dt/
   issues, tagged with 'schema-comparison'.

2.  Terminology and Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   This document makes use of the following terminology introduced in
   the YANG 1.1 Data Modeling Language [RFC7950]:

   *  schema node

   This document uses terminology introduced in the YANG versioning
   requirements document [I-D.ietf-netmod-yang-versioning-reqs].

   This document makes of the following terminology introduced in the
   YANG Packages [I-D.ietf-netmod-yang-packages]:

   *  YANG schema
>>JTS: need to revisit this. We dropped it an other drafts.
>>PER: Changed to "package schema" in yang-packages? Reused
       "schema node" but dropped "yang schema" in module-versioning.

   In addition, this document defines the terminology:

   *  Change scope: Whether a change between two revisions is classified
      as non-backwards-compatible, backwards-compatible, or editorial.
>>JTS: or "possibly-NBC" or "potentially-NBC" for e.g. pattern, must,
       if-feature changes etc.
>>PER: Replace "scope" with compatibility "type" or "status" or "class"
       or "classification" or "category"? Double check yang-semver
       wording.

   *  Node compatibility statement: An extension statements (e.g. nbc-
      change-at) that can be used to indicate the backwards
      compatibility of individual schema nodes and specific YANG
      statements.
>>PER: Tie back to "change scope/type/class" or what it will called.

3.  Generic YANG schema tree comparison algorithm

   The generic schema comparison algorithm works on any YANG schema.
   This could be a schema associated with an individual YANG module, or
   a YANG schema represented by a set of modules, e.g., specified by a
   YANG package.
>>JTS: can it apply to an artifact? a sub-module?
>>PER: it should apply to any blob of yang, artifact or set/bundle of
       yang modules.
>>PER: What about moving a leaf between two groupings, if both are used
       it might be fine, but if only one of the groupings are used it
       might be NBC. Change a name of a choice.
>>PER: What is the main aim and/or use case for the tool?

**>>JTS: how should we report the same path+element that has only changed namespace ? It would be extremely busy to report NBC against every single 
>>PER: A single BIG warning is easier to parse and understand. Might
       need rewording due to how the draft uses "namespace".


Wilton                    Expires 28 April 2023                 [Page 4]

Internet-Draft           YANG Schema Comparison             October 2022


   The algorithm performs a recursive tree wise comparison of two
   revisions of a YANG schema, with the following behavior:

>>PER: Top level analysis needs to be reported in some way. E.g. a new
       module, modules not in both sets of modules, and also namespace
       and prefix changes.

======================= Got to here Jan 31 =======================

      The comparison algorithm primarily acts on the parts of the schema
      defined by unique identifiers.
>>JTS: ??
>>PER: What does the algorithm/tool work on? Traversing schema tree by
       (schema) node name, type changes, typedefs, enums, identifiers.
       What about namespace changes? (See next.)

      Each identifier is qualified with the name of the module that
      defines the identifier.
>>JTS: vs namespace. What about revision-label/date ? See ^

      Identifiers in different namespaces (as defined in 6.2.1 or RFC
>>JTS: *of*
      7950) are compared separately.  E.g., 'features' are compared
      separately from 'identities'.
>>JTS: Do we really need to get into this here ?
>>PER: Multiple pass on different YANG constructs because they can
       have same name, e.g. a feature and identity can be named the
       same thing.
>>PER: Implement the algorithm in pseudo code.

>>PER: Old client and new server compatibility, who can produce and
       consume what messages. Suggestion to have an option to report any
       change for a leaf, i.e. added/removed/changed modifications.
       Suggestion to have at least two different compatibility
       reports/modes, one for the wire format and one for the YANG model
       designers.

======================= Got to here Feb 7 =======================

      Within an identifier namespace, the identifiers are compared
      between the two schema revisions by qualified identifier name.
      The 'renamed-from' extension allow for a meaningful comparison
      where the name of the identifier has changed between revisions.
      The 'renamed-from' identifier parameter is only used when an
      identifier in the new schema revision cannot be found in the old
      schema revision.

      YANG extensions, features, identities, typedefs are checked by
      comparing the properties defined by their YANG sub-statements
      between the two revisions.

      YANG groupings, top-level data definition statements, rpcs, and
      notifications are checked by comparing the top level properties
      defined by their direct child YANG sub-statements, and also by
      recursively checking the data definition statements.
>>JTS: a change to how leafs are organized into groupings, without changing the actual schema path or namespace of all those path+elements, should just be editorial right ?  Like re-organizing leaf types into typedefs.

      The rules specified in section 3 of
      [I-D.ietf-netmod-yang-module-versioning] determine whether the
      changes are backwards-compatible or non-backwards-compatible.

      The rules specified in section 3.2 of
      [I-D.ietf-netmod-yang-packages] determine whether backwards-
      compatible changes are 'minor' or 'editorial'.
>>JTS: packages or YANG Semver?

**>>JTS: Currently the draft has the "nbc-change-at", etc extensions
that we defined in the fall of 2022 (during Module Versioning work).
But maybe it isn't clear that these are the best names to convey what
we intend with these extensions? Part of a bigger discussion about
what per-node flags we want:
a) for documenting whether a pattern/must/when is NBC vs BC (i.e. tool can't tell)
b) for author to indicate an NBC change actually has no impact to users 
(e.g. range corrected to more accurately express the values that have always
been accepted/not-accepted)
c) additional, secondary extensions for sub-modules (to point to the sub-module revision)

      For YANG description", "must", and "when" statements, the
      "backwards-compatible" and "editorial" extension statements can be
      used to mark instances when the statements have changed in a
      backwards-compatible or editorial way.  Since by default the
      comparison algorithm assumes that any changes in these statements
      are non-backwards-compatible.  XXX, more info required here, since
      the revisions in the module history probably need to be available
      for this to work in the general branched revisions case.





Wilton                    Expires 28 April 2023                 [Page 5]

Internet-Draft           YANG Schema Comparison             October 2022


      Submodules are not relevant for schema comparison purposes, i.e.
      the comparison is performed after submodule resolution has been
      completed.
>>JTS: resolution? flattening?
**>>JTS: hmmm. We said that yang semver *can* apply to submodules. Maybe we should handle this properly.  e.g. for a moved element:
- Major (NBC) against the sub-module where it was moved out
- Minor (BC) against the subomdule where it was moved in
- Editorial against the module

3.1.  YANG module revision scope extension annotations


3.2.  Node compatibility extension statements

   In addition to the revision extension statement in (TBD: ref to
   Module Versionning), this document defines YANG extension statements
   to indicate compatibility information for individual schema nodes and
   certain YANG statements.
>>JTS: in addition to the *top level* revision extension statement

   The node compatibility extension statements are applicable to schema
   nodes (e.g. leaf, rpc, choice) as defined in [RFC7950], as well as a
   set of YANG statements (e.g. typedef) as listed in the YANG
   definition of the nbc-change-at extension in the ietf-yang-revisions
   module in this document.

   While the top level non-backwards-compatible-revision statement is
   mandatory when there is a non-backwards-compatible change, the node
   compatibility statements are optional.

   For many YANG statements, programmatic tooling can determine whether
   the changes to a statement between two module revisions constitutes a
   backwards-compatible or non-backwards-compatible change.  However,
   for some statements, it may be impractical for tooling to determine
   whether the changes are backwards-compatible or not.  For example, in
   the general case, tooling cannot determine whether the change in a
   YANG description statement causes a change in the semantics of a YANG
   schema node.  If the change is to fix a typo or spelling mistake then
   the change can be classified as an editorial backwards-compatible
   change.  Conversely, if the change modifies the behavioral
   specification of the data node then the change would need to be
   classified as either a non editorial backwards-compatible change or a
   non-backwards- compatible change.  Hence, extension statements are
   defined to annotate a YANG module with additional information to
   clarify the scope of changes in cases that cannot be determined by
   algorithmic comparison.

   Three extensions are defined for schema node compatibility
   information:

   nbc-change-at:  Indicates a specific YANG statement had a non-
      backwards-compatible change at a particular module or sub-module
      revision




Wilton                    Expires 28 April 2023                 [Page 6]

Internet-Draft           YANG Schema Comparison             October 2022


   bc-change-at:  Indicates a specific YANG statement had a backwards-
      compatible change at a particular module or sub-module revision

   editorial-change-at:  Indicates a specific YANG statement had an
      editorial change at a particular module or sub-module revision.
      The meaning of an editorial change is as per YANG Semver
      [I-D.ietf-netmod-yang-semver]

   When a node compatibility statement is added to a schema node in a
   sub-module, the revision indicated for the compatibility statement is
   that of the sub-module.

   Adding, modifying or removing any of the node compatibility
   statements is considered to be a BC change.

   The following example illustrates the node compatibility statements:

                 container some-stuff {
                   leaf used-to-be-a-string {
                     rev:nbc-change-at "3.0.0" {
                       description "Changed from a string to a uint32.";
                     }
                     type uint32;
                   }
                   leaf fixed-my-description-typo {
                     rev:editorial-change-at "2022-06-03";
                     type string;
                     description "This description used to have a typo."
                   }
                   list sir-changed-a-lot {
                     rev:editorial-change-at "3.0.0";
                     rev:bc-change-at "2.3.0";
                     rev:bc-change-at "1.2.1_non_compatible";
                     description "a list of stuff";
                     ordered-by user;
                     key "foo";
                     leaf foo {
                       type string;
                     }
                     leaf thing {
                       type uint8;
                     }
                   }

   Note that an individual YANG statement may have a backwards-
   compatible change in a revision that is non-backwards-compatible
   (e.g. some other node changed in a non-backwards-compatible fashion
   in that particular revision).



Wilton                    Expires 28 April 2023                 [Page 7]

Internet-Draft           YANG Schema Comparison             October 2022


   If changes are ported from one branch of YANG model revisions to
   another branch, care must be taken with any node compatibilty
   statements.  A simple copy-n-paste should not be used.  The node
   compatibilty statements may incorrectly reference a revision that is
   not in the history of the new revision.  Further, the statements
   might not apply depending on what the history is like in that new
   branch (e.g., an NBC change that is ported might not be an NBC change
   in the new branch).  Node compatiblity statements should not be
   copied over to the new branch.  Instead, the changes should be
   considered as completely new on the new branch, and any compatibility
   information should be generated from scratch.

   When a node compatibility statement is present, that compatibilty
   statement is the authoritative classification of the backwards
   compatibility of the change to the schema node in the specifed
   revision.  This allows a human author to explicitly communicate the
   compatibilty and potentially override the rules specified in this
   document.  This is useful in a number of situations including:
>>JTS: rules specified in Module Versioning (not this doc)

   *  When a tool may not be able to accurately determine the
      compatibilty of a change.  For example, a change in a 'pattern' or
      'must' statement can be difficult for a user or tool to determine
      if it is a compatible change.

   *  When a pattern, range or other statement is changed to more
      correctly define the server constraint.  An example is correcting
      a pattern that incorrectly included 355.xxx.xxx.xxx as a possible
      IPv4 address to make it only accept up to 255.xxx.xxx.xxx.

   Nothing about the backwards compatibility of a schema node is implied
   by the absence of a node compatibility statement.  Hence, the schema
   node definition must be compared between the two revisions to
   determine the backwards compatibility.

   If any nbc-change-at extension statements exists in a module or sub-
   module, then the module or sub-module MUST have non-backwards-
   compatible-revision substatements in each revision statement of the
   module or sub-module history where the revision matches the argument
   of any nbc-change-at statements.  If any revision statements are
   removed, then all node compatibiilty statements that reference that
   revision MUST also be removed.  Conversely, node compatibilty
   statements MUST NOT be removed unless the associated revision
   statement in the revision history is removed.

   If a node compatiblity statement is added to a grouping, then all
   instances where the grouping is used in the module or by an importing
   module are also impacted by the compatibilty information.  Similarly
   for a 'typedef', all leafs and list-lists that use that typedef share



Wilton                    Expires 28 April 2023                 [Page 8]

Internet-Draft           YANG Schema Comparison             October 2022


   the specified compatibility classification.  A non-backwards-
   compatible change to a typedef or grouping defined in one module that
   is used by an importing module, does not cause the importing module
   to add a non-backwards-compatible-revision statement to the revision
   history.  Non-backwards-compatible marking does not carry through
   import statements.

   A node compatibility statement at a leaf, leaf-list or typedef
   context takes precedence over a node compatibility statement in a
   typedef used by the leaf, leaf-list or typedef.  If multiple typedefs
   with compatibility statements are used by a leaf, leaf-list or
   typedef (e.g. a union), and there is no compatibility statement at
   the top leaf, leaf-list or typedef context, then the order of
   precedence used to classify the compatibility of the top level leaf,
   leaf-list or typedef is as follows: nbc-change-at, bc-change-at and
   finally editorial-change-at.  That is, the leaf, leaf-list or typedef
   takes the most impactful change classification of all the underlying
   typedefs.

   Node compatibility statements are not supported on YANG statements
   such as 'pattern' or 'range'.  The compatibility statement instead
   goes against the leaf, leaf-list or typedef context.

   Node compatibility statements that refer to pre-release revisions of
   a module MUST be removed when a full release revision of the module
   is published.

   Node compatibilty statements SHOULD NOT be used when it isn't clear
   which change the statement is referring to.  For example: If a leaf
   is reordered within a container, a node compatibility statement
   SHOULD NOT be used against the parent container nor against the
   reordered leaf.  Similarly, if a leaf is renamed or moved to another
   context without keeping the old leaf present in the model and marked
   obsolete, a node compatibilty statement SHOULD not be used.

4.  YANG module comparison algorithm

   The schema comparison algorithm defined in Section 3 can be used to
   compare the schema for individual modules, but with the following
   modifications:

      Changes to the module's metadata information (i.e. module level
      description, contact, organization, reference) should be checked
      (as potential editorial changes).

      The module's revision history should be ignored from the
      comparison.
**>>JTS: We didn't consider what it means if you rev a module and the only change is some history entry added or removed in the middle of the history



Wilton                    Expires 28 April 2023                 [Page 9]

Internet-Draft           YANG Schema Comparison             October 2022


      Changes to augmentations and deviations should be sorted by path
      and compared.

5.  YANG schema comparison algorithms

5.1.  Standard YANG schema comparison algorithm

   The standard method for comparing two YANG schema versions is to
   individually compare the module revisions for each module implemented
   by the schema using the algorithm defined in Section 4 and then
   aggregating the results together:
**>>JTS: does that approach work fine for augmentation & deviation modules? I *think* it might.
**>>JTS: this goes back to how we want to treat a path that is identical except for a change in namespace. 

   *  If all implemented modules in the schema have only changed in an
      editorial way then the schema is changed in an editorial way

   *  If all implemented modules in the schema have only been changed in
      an editorial or backwards-compatible way then the schema is
      changed in a backwards-compatible way

   *  Otherwise if any implemented module in the schema has been changed
      in a non-backwards-compatible way then the schema is changed in a
      non-backwards-compatible way.

   The standard schema comparison method is the RECOMMENDED scheme to
   calculate the version number change for new versions of YANG
   packages, because it allows the package version to be calculated
   based on changes to implemented modules revision history (or YANG
   semantic version number if used to identify module revisions).

5.2.  Filtered YANG schema comparison algorithm

   Another method to compare YANG schema, that is less likely to report
   inconsequential differences, is to construct full schema trees for
   the two schema versions, directly apply a version of the comparison
   algorithm defined in Section 3.  This may be particular useful when
   the schema represents a complete datastore schema for a server
   because it allows various filtered to the comparison algorithm to
   provide a more specific answer about what changes may impact a
   particular client.

   The full schema tree can easily be constructed from a YANG package
   definition, or alternative YANG schema definition.

   Controlled by input parameters to the comparison algorithm, the
   following parts of the schema trees can optionally be filtered during
   the comparison:





Wilton                    Expires 28 April 2023                [Page 10]

Internet-Draft           YANG Schema Comparison             October 2022


      All "grouping" statements can be ignored (after all "use"
      statements have been processed when constructing the schema).
>>JTS: editorial

      All module and submodule metadata information (i.e. module level
      description, contact, organization, reference) can be ignored.
>>JTS: editorial (unless tagged with the per element NBC marker

      The comparison can be restricted to the set of features that are
      of interest (different sets of features may apply to each schema
      versions).
**>>JTS: a schema comparison based on Packages can filter out 'features' that are disabled. But a schema comparison based on a list of YANG modules would have to assume all features are enabled (or disabled for if-feature "not xyz").  Maybe just consider all schema inside if-feature to exist (could that cause collisions ?  are you allowed to have the same leaf name inside if-feature x and if-feature !x ?) - we don't think so.

      The comparison can be restricted to the subset of data nodes,
      RPCs, notifications and actions, that are of interest (e.g., the
      subset actually used by a particular client), providing a more
      meaningful result.

      The comparison could filter out backwards-compatible 'editorial'
      changes.
>>JTS: do we really need that? People can just ignore the list of editorial outputs in the non-filtered version.

   In addition to reporting the overall scope of changes at the schema
   level, the algorithm output can also optionally generate a list of
   specific changes between the two schema, along with the
   classification of those individual changes.

6.  Comparison tooling

   'pyang' has some support for comparison two module revisions, but
   this is currently limited to a linear module history.
>>JTS: not really. It just compares any two module versions.

   TODO, it would be helpful if there is reference tooling for schema
   comparison.

7.  Module Versioning Extension YANG Modules

   YANG module with extension statements for annotating NBC changes,
   revision label, status description, and importing by version.

   <CODE BEGINS> file "ietf-yang-rev-annotations@2019-11-11.yang"
   module ietf-yang-rev-annotations {
     yang-version 1.1;
     namespace "urn:ietf:params:xml:ns:yang:ietf-yang-rev-annotations";
     prefix rev-ext;

     organization
       "IETF NETMOD (Network Modeling) Working Group";
     contact
       "WG Web:   <https://datatracker.ietf.org/wg/netmod/>
        WG List:  <mailto:netmod@ietf.org>




Wilton                    Expires 28 April 2023                [Page 11]

Internet-Draft           YANG Schema Comparison             October 2022


        Author:   Robert Wilton
                  <mailto:rwilton@cisco.com>";

     description
       "This YANG 1.1 module contains extensions to annotation to YANG
        module with additional metadata information on the nature of
        changes between two YANG module revisions.

        XXX, maybe these annotations could also be included in
        ietf-yang-revisions?

        Copyright (c) 2019 IETF Trust and the persons identified as
        authors of the code.  All rights reserved.

        Redistribution and use in source and binary forms, with or
        without modification, is permitted pursuant to, and subject
        to the license terms contained in, the Simplified BSD License
        set forth in Section 4.c of the IETF Trust's Legal Provisions
        Relating to IETF Documents
        (http://trustee.ietf.org/license-info).

        This version of this YANG module is part of RFC XXXX; see
        the RFC itself for full legal notices.

        The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
        NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
        'MAY', and 'OPTIONAL' in this document are to be interpreted as
        described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
        they appear in all capitals, as shown here.";

     // RFC Ed.: update the date below with the date of RFC publication
     // and remove this note.
     // RFC Ed.: replace XXXX (inc above) with actual RFC number and
     // remove this note.

     revision 2022-10-25 {
       rev:revision-label 1.0.0-draft-ietf-netmod-yang-schema-comparison-02;
       description
         "Draft revision";
       reference
         "XXXX: YANG Schema Comparison";
     }

     extension nbc-change-at {
       argument revision-date-or-label;
       description
         "A node compatibility statement that identifies a revision
         (by revision-label, or revision date if a revision-label is



Wilton                    Expires 28 April 2023                [Page 12]

Internet-Draft           YANG Schema Comparison             October 2022


         not available) where a non-backwards-compatible change has
         occurred in a particular YANG statement relative to the
         previous revision listed in the revision history.

         The format of the revision-label argument MUST conform to the
         pattern defined for the ietf-yang-revisions
         revision-date-or-label typedef.

         The following YANG statements MAY have zero or more
         nbc-change-at substatements:
           - all schema node statements (leaf, rpc, choice, etc)
           - 'feature' statements
           - 'grouping' statements
           - 'identity' statements
           - 'must' statements
           - 'refine' statements
           - 'typedef' statements
           - YANG extensions

         Each YANG statement MUST only a have a single node
         compatibilty statement (one of nbc-change-at, bc-change-at
         or editorial-change-at) for a particular revision. When a node
         has more than one of the node compatibilty statements (for
         different revisions), they must be ordered from most recent
         to least recent.

         An nbc-change-at statement can have 0 or 1 'description'
         substatements.

         The nbc-change-at statement in not inherited by descendants
         in the schema tree. It only applies to the specific YANG
         statement with which it is associated.
         ";

       reference
         "XXXX: YANG Schema Comparison;
          Section XXX, XXX";

     }

     extension bc-change-at {
       argument revision-date-or-label;
       description
         "A node compatibility statement that identifies a revision
         (by revision-label, or revision date if a revision-label is
         not available) where a backwards-compatible change has
         occurred in a particular YANG statement relative to the
         previous revision listed in the revision history.



Wilton                    Expires 28 April 2023                [Page 13]

Internet-Draft           YANG Schema Comparison             October 2022


         The format of the revision-label argument MUST conform to the
         pattern defined for the ietf-yang-revisions
         revision-date-or-label typedef.

         The following YANG statements MAY have zero or more
         bc-change-at substatements:
           - all schema node statements (leaf, rpc, choice, etc)
           - 'feature' statements
           - 'grouping' statements
           - 'identity' statements
           - 'must' statements
           - 'refine' statements
           - 'typedef' statements
           - YANG extensions

         Each YANG statement MUST only a have a single node
         compatibilty statement (one of nbc-change-at, bc-change-at
         or editorial-change-at) for a particular revision. When a node
         has more than one of the node compatibilty statements (for
         different revisions), they must be ordered from most recent
         to least recent.

         An bc-change-at statement can have 0 or 1 'description'
         substatements.

         The bc-change-at statement in not inherited by descendants
         in the schema tree. It only applies to the specific YANG
         statement with which it is associated.
         ";

       reference
         "XXXX: YANG Schema Comparison;
          Section XXX, XXX";

     }

     extension editorial-change-at {
       argument revision-date-or-label;
       description
         "A node compatibility statement that identifies a revision
         (by revision-label, or revision date if a revision-label is
         not available) where an editorial change has
         occurred in a particular YANG statement relative to the
         previous revision listed in the revision history.

         The format of the revision-label argument MUST conform to the
         pattern defined for the ietf-yang-revisions
         revision-date-or-label typedef.



Wilton                    Expires 28 April 2023                [Page 14]

Internet-Draft           YANG Schema Comparison             October 2022


         The following YANG statements MAY have zero or more
         editorial-change-at substatements:
           - all schema node statements (leaf, rpc, choice, etc)
           - 'feature' statements
           - 'grouping' statements
           - 'identity' statements
           - 'must' statements
           - 'refine' statements
           - 'typedef' statements
           - YANG extensions

         Each YANG statement MUST only a have a single node
         compatibilty statement (one of nbc-change-at, bc-change-at
         or editorial-change-at) for a particular revision. When a node
         has more than one of the node compatibilty statements (for
         different revisions), they must be ordered from most recent
         to least recent.

         An editorial-change-at statement can have 0 or 1 'description'
         substatements.

         The editorial-change-at statement in not inherited by descendants
         in the schema tree. It only applies to the specific YANG
         statement with which it is associated.
         ";

       reference
         "XXXX: YANG Schema Comparison;
          Section XXX, XXX";

     }

     extension backwards-compatible {
       argument revision-date-or-label;
       description
         "Identifies a revision (by revision-label, or revision date if
          a revision-label is not available) where a
          backwards-compatible change has occurred relative to the
          previous revision listed in the revision history.

          The format of the revision-label argument MUST conform to the
          pattern defined for the ietf-yang-revisions
          revision-date-or-label typedef.

          The following YANG statements MAY have zero or more
          'rev-ext:non-backwards-compatible' statements:
              description
              must



Wilton                    Expires 28 April 2023                [Page 15]

Internet-Draft           YANG Schema Comparison             October 2022


              when

          Each YANG statement MUST only a have a single
          non-backwards-compatible, backwards-compatible, or editorial
          extension statement for a particular revision-label, or
          corresponding revision-date.";

       reference
         "XXXX: YANG Schema Comparison;
          Section XXX, XXX";
     }

     extension editorial {
       argument revision-date-or-label;
       description
         "Identifies a revision (by revision-label, or revision date if
          a revision-label is not available) where an editorial change
          has occurred relative to the previous revision listed in the
          revision history.

          The format of the revision-label argument MUST conform to the
          pattern defined for the ietf-yang-revisions
          revision-date-or-label typedef.

          The following YANG statements MAY have zero or more
          'rev-ext:non-backwards-compatible' statements:
              description

          Each YANG statement MUST only a have a single
          non-backwards-compatible, backwards-compatible, or editorial
          extension statement for a particular revision-label or
          corresponding revision-date.";

       reference
         "XXXX: YANG Schema Comparison;
          Section XXX, XXX";
     }

     extension renamed-from {
       argument yang-identifier;
       description
         "Specifies a previous name for this identifier.

          This can be used when comparing schema to optimize handling
          for data nodes that have been renamed rather than naively
          treated them as data nodes that have been deleted and
          recreated.




Wilton                    Expires 28 April 2023                [Page 16]

Internet-Draft           YANG Schema Comparison             October 2022


          The argument 'yang-identifier' MUST take the form of a YANG
          identifier, as defined in section 6.2 of RFC 7950.

          Any YANG statement that takes a YANG identifier as its
          argument MAY have a single 'rev-ext:renamed-from'
          sub-statement.
**>>JTS: hmmm. How does this work with multiple nbc-change-at/bc-change-at statements
that are against a single leaf?

          TODO, we should also facilitate identifiers being moved into
          other modules, e.g. by supporting a module-name qualified
          identifier.";
>>JTS: yang-identifier is module qualified (via namespace prefix)
>>JTS: wait - don't we need a full path+name here ?

       reference
         "XXXX: YANG Schema Comparison;
          Section XXX, XXX";
     }
   }
   <CODE ENDS>

8.  Contributors
>>JTS: fix how we thank others to match Module Versioning

   This document grew out of the YANG module versioning design team that
   started after IETF 101.  The following individuals are (or have been)
   members of the design team and have worked on the YANG versioning
   project:

   *  Balazs Lengyel

   *  Benoit Claise

   *  Bo Wu

   *  Ebben Aries

   *  Jason Sterne

   *  Joe Clarke

   *  Juergen Schoenwaelder

   *  Mahesh Jethanandani

   *  Michael Wang

   *  Qin Wu

   *  Reshad Rahman

   *  Rob Wilton



Wilton                    Expires 28 April 2023                [Page 17]

Internet-Draft           YANG Schema Comparison             October 2022


   The ideas for a tooling based comparison of YANG module revisions was
   first described in [I-D.clacla-netmod-yang-model-update].  This
   document extends upon those initial ideas.

9.  Security Considerations

   The document does not define any new protocol or data model.  There
   are no security impacts.

10.  IANA Considerations

10.1.  YANG Module Registrations

   The following YANG module is requested to be registered in the "IANA
   Module Names" registry:

   The ietf-yang-rev-annotations module:

      Name: ietf-yang-rev-annotations

      XML Namespace: urn:ietf:params:xml:ns:yang:ietf-yang-rev-
      annotations

      Prefix: rev-ext

      Reference: [RFCXXXX]

11.  References

11.1.  Normative References

   [I-D.ietf-netmod-yang-module-versioning]
              Wilton, R., Rahman, R., Lengyel, B., Clarke, J., and J.
              Sterne, "Updated YANG Module Revision Handling", Work in
              Progress, Internet-Draft, draft-ietf-netmod-yang-module-
              versioning-07, 24 October 2022,
              <https://datatracker.ietf.org/api/v1/doc/document/draft-
              ietf-netmod-yang-module-versioning/>.

   [I-D.ietf-netmod-yang-packages]
              Wilton, R., Rahman, R., Clarke, J., Sterne, J., and B. Wu,
              "YANG Packages", Work in Progress, Internet-Draft, draft-
              ietf-netmod-yang-packages-03, 4 March 2022,
              <https://www.ietf.org/archive/id/draft-ietf-netmod-yang-
              packages-03.txt>.






Wilton                    Expires 28 April 2023                [Page 18]

Internet-Draft           YANG Schema Comparison             October 2022


   [I-D.ietf-netmod-yang-semver]
              Clarke, J., Wilton, R., Rahman, R., Lengyel, B., Sterne,
              J., and B. Claise, "YANG Semantic Versioning", Work in
              Progress, Internet-Draft, draft-ietf-netmod-yang-semver-
              08, 24 October 2022,
              <https://datatracker.ietf.org/api/v1/doc/document/draft-
              ietf-netmod-yang-semver/>.

   [I-D.ietf-netmod-yang-solutions]
              Wilton, R., "YANG Versioning Solution Overview", Work in
              Progress, Internet-Draft, draft-ietf-netmod-yang-
              solutions-01, 2 November 2020,
              <https://www.ietf.org/archive/id/draft-ietf-netmod-yang-
              solutions-01.txt>.

   [I-D.ietf-netmod-yang-versioning-reqs]
              Clarke, J., "YANG Module Versioning Requirements", Work in
              Progress, Internet-Draft, draft-ietf-netmod-yang-
              versioning-reqs-07, 10 July 2022,
              <https://www.ietf.org/archive/id/draft-ietf-netmod-yang-
              versioning-reqs-07.txt>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC7950]  Bjorklund, M., Ed., "The YANG 1.1 Data Modeling Language",
              RFC 7950, DOI 10.17487/RFC7950, August 2016,
              <https://www.rfc-editor.org/info/rfc7950>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

11.2.  Informative References

   [I-D.clacla-netmod-yang-model-update]
              Claise, B., Clarke, J., Lengyel, B., and K. D'Souza, "New
              YANG Module Update Procedure", Work in Progress, Internet-
              Draft, draft-clacla-netmod-yang-model-update-06, 2 July
              2018, <https://www.ietf.org/archive/id/draft-clacla-
              netmod-yang-model-update-06.txt>.

Author's Address

   Robert Wilton (editor)
   Cisco Systems, Inc.



Wilton                    Expires 28 April 2023                [Page 19]

Internet-Draft           YANG Schema Comparison             October 2022


   Email: rwilton@cisco.com


















































Wilton                    Expires 28 April 2023                [Page 20]
